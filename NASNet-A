import os
import skimage
from skimage import io, transform
import math
import keras
import numpy as np
import tensorflow as tf
from keras import layers
from keras.layers import Input, Add, Dense, Activation,Reshape,Dropout,SeparableConv2D, ZeroPadding2D, BatchNormalization,Concatenate,GlobalAveragePooling2D, Flatten,Cropping2D, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D, Dot, UpSampling2D
from keras.models import Model, load_model
from keras.preprocessing import image
from keras.utils import layer_utils
from keras.utils.data_utils import get_file
from keras.applications.imagenet_utils import preprocess_input
import pydot
from IPython.display import SVG
from keras.utils.vis_utils import model_to_dot
from keras.utils import plot_model
from keras.initializers import glorot_uniform
import scipy.misc
from matplotlib.pyplot import imshow
from keras.layers.advanced_activations import LeakyReLU, PReLU
from keras.regularizers import l2
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img  
import cv2
import matplotlib.pyplot as plt
import random
%matplotlib inline

import keras.backend as K
K.set_learning_phase(1)

def adjust(x, target_layer, filters):
    if x is None:
        x = target_layer
    elif int(x.shape[1]) != int(target_layer.shape[1]):
        x = Activation('relu')(x)
        p1 = AveragePooling2D((1, 1), strides=2)(x)
        p1 = Conv2D(filters // 2, (1, 1), padding='same',use_bias=False)(p1)
        p2 = ZeroPadding2D(padding=((0, 1), (0, 1)))(x)
        p2 = Cropping2D(cropping=((1, 0), (1, 0)))(p2)
        p2 = AveragePooling2D((1, 1), strides=2)(p2)
        p2 = Conv2D(filters // 2, (1, 1), padding='same',use_bias=False)(p2)
        x = Concatenate(axis=3)([p1, p2])
        x = BatchNormalization(axis=3)(x)
    elif int(x.shape[-1]) != filters:
        x = Activation('relu')(x)
        x = Conv2D(filters, (1, 1), strides=(1, 1), padding='same',use_bias=False)(x)
        x = BatchNormalization(axis=3)(x)
    return x

def Separable(x, filters, kernel_size, strides):
    for repeat in range(1, 3):
        strides_temp = strides if repeat == 1 else 1
        x = Activation('relu')(x)
        x = SeparableConv2D(filters,kernel_size=kernel_size,strides=strides_temp,padding='same',use_bias=False)(x)
        x = BatchNormalization(axis=3)(x)
    return x

def reductionA(prev, cur, filters):
    prev = adjust(prev, cur, filters)
    cur = Activation('relu')(cur)
    cur = Conv2D(filters, (1, 1))(cur)
    cur = BatchNormalization(axis=3)(cur)
    x1 = Add()([Separable(cur,filters, 5, strides=2),Separable(prev,filters, 7, strides=2)])
    x2 = Add()([MaxPooling2D(3, strides=2, padding='same')(cur),Separable(prev,filters, 7, strides=2)])
    x3 = Add()([AveragePooling2D(3, strides=2, padding='same')(cur),Separable(prev,filters, 5, strides=2)])
    x4 = Add()([AveragePooling2D(3, strides=1, padding='same')(x1), x2])
    x5 = Add()([Separable(x1, filters, 3, strides=1),MaxPooling2D(3, strides=2, padding='same')(cur)])
    return cur, Concatenate(axis=3)([prev, x3, x4, x5])
    
def normalA(prev, cur, filters):
    prev = adjust(prev, cur, filters)
    cur = Activation('relu')(cur)
    cur = Conv2D(filters, (1, 1))(cur)
    cur = BatchNormalization(axis=3)(cur)
    x1 = Add()([Separable(cur, filters, 5, 1),Separable(prev, filters, 3, 1)])
    x2 = Add()([Separable(prev, filters, 5, 1),Separable(prev, filters, 3, 1)])
    x3 = Add()([AveragePooling2D(pool_size=3, strides=1, padding='same')(cur),prev])
    x4 = Add()([AveragePooling2D(pool_size=3, strides=1, padding='same')(prev),AveragePooling2D(pool_size=3, strides=1, padding='same')(prev)])
    x5 = Add()([Separable(cur, filters, 3, 1),cur])
    return cur, Concatenate(axis=3)([prev, x1, x2, x3, x4, x5])

def NASNet_A(input_shape = (299,299,3),nb_blocks=6, penultimate_filters=4032):
    X_input = Input(input_shape)
    filters = penultimate_filters//24
    X = Conv2D(96, (3, 3), strides=(2, 2), padding='valid',use_bias=False)(X_input)
    X = BatchNormalization(axis = 3)(X)
    p, X = reductionA(X_input, X, filters//4)
    p, X = reductionA(p, X, filters//2)
    for i in range(1,1+nb_blocks):
        p, X = normalA(p, X, filters)
    p, X = reductionA(p, X, filters*2)
    for i in range(1,1+nb_blocks):
        p, X = normalA(p, X, filters*2)
    p, X = reductionA(p, X, filters*4)
    for i in range(1,1+nb_blocks):
        p, X = normalA(p, X, filters*4)
    X = GlobalAveragePooling2D()(X)
    X = Dropout(0.5)(X)
    X = Dense(2, activation='softmax')(X)    
    model = Model(inputs = X_input, outputs = X, name='NASNet_A')
    return model
    
model = NASNet_A()
model.summary()
